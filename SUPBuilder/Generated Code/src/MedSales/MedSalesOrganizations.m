/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.231
*/ 

#import "MedSalesOrganizations.h"
#import "MedSalesOrganizationsMetaData.h"
#import "SUPJsonObject.h"
#import "MedSalesMedSalesDB.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "MedSalesKeyGenerator.h"
#import "MedSalesLocalKeyGenerator.h"
#import "MedSalesLogRecordImpl.h"

@implementation MedSalesOrganizations

@synthesize organization_id = _organization_id;
@synthesize organization_name = _organization_name;
@synthesize organization_region = _organization_region;
@synthesize organization_street = _organization_street;
@synthesize organization_city = _organization_city;
@synthesize organization_state = _organization_state;
@synthesize organization_zip = _organization_zip;
@synthesize organization_phone = _organization_phone;
@synthesize surrogateKey = _surrogateKey;

- (int64_t)surrogateKey
{
    return _surrogateKey;
}

- (void)setOrganization_id:(int32_t)newOrganization_id
{
    if (newOrganization_id != self->_organization_id)
    {
        self->_organization_id = newOrganization_id;
        self.isDirty = YES;
    }
}

- (void)setOrganization_name:(NSString*)newOrganization_name
{
    if (newOrganization_name != self->_organization_name)
    {
		[self->_organization_name release];
        self->_organization_name = [newOrganization_name retain];
        self.isDirty = YES;
    }
}

- (void)setOrganization_region:(NSString*)newOrganization_region
{
    if (newOrganization_region != self->_organization_region)
    {
		[self->_organization_region release];
        self->_organization_region = [newOrganization_region retain];
        self.isDirty = YES;
    }
}

- (void)setOrganization_street:(NSString*)newOrganization_street
{
    if (newOrganization_street != self->_organization_street)
    {
		[self->_organization_street release];
        self->_organization_street = [newOrganization_street retain];
        self.isDirty = YES;
    }
}

- (void)setOrganization_city:(NSString*)newOrganization_city
{
    if (newOrganization_city != self->_organization_city)
    {
		[self->_organization_city release];
        self->_organization_city = [newOrganization_city retain];
        self.isDirty = YES;
    }
}

- (void)setOrganization_state:(NSString*)newOrganization_state
{
    if (newOrganization_state != self->_organization_state)
    {
		[self->_organization_state release];
        self->_organization_state = [newOrganization_state retain];
        self.isDirty = YES;
    }
}

- (void)setOrganization_zip:(int32_t)newOrganization_zip
{
    if (newOrganization_zip != self->_organization_zip)
    {
        self->_organization_zip = newOrganization_zip;
        self.isDirty = YES;
    }
}

- (void)setOrganization_phone:(NSString*)newOrganization_phone
{
    if (newOrganization_phone != self->_organization_phone)
    {
		[self->_organization_phone release];
        self->_organization_phone = [newOrganization_phone retain];
        self.isDirty = YES;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self.isNew = YES;
    }
}

static SUPEntityDelegate *g_MedSalesOrganizations_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_MedSalesOrganizations_delegate == nil) {
			g_MedSalesOrganizations_delegate = [[SUPEntityDelegate alloc] initWithName:@"MedSalesOrganizations" clazz:[self class]
				metaData:[self metaData] dbDelegate:[MedSalesMedSalesDB delegate] database:[MedSalesMedSalesDB instance]];
		}
	}
	
	return [[g_MedSalesOrganizations_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* MedSalesOrganizations_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (MedSalesOrganizations_META_DATA == nil) {
		MedSalesOrganizations_META_DATA = [[MedSalesOrganizationsMetaData alloc] init];
	}
	
	return MedSalesOrganizations_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [MedSalesOrganizations metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[MedSalesOrganizations delegate]];
    }
    return self;    
}

- (void)dealloc
{
    if(_organization_name)
    {
        [_organization_name release];
        _organization_name = nil;
    }
    if(_organization_region)
    {
        [_organization_region release];
        _organization_region = nil;
    }
    if(_organization_street)
    {
        [_organization_street release];
        _organization_street = nil;
    }
    if(_organization_city)
    {
        [_organization_city release];
        _organization_city = nil;
    }
    if(_organization_state)
    {
        [_organization_state release];
        _organization_state = nil;
    }
    if(_organization_phone)
    {
        [_organization_phone release];
        _organization_phone = nil;
    }
	[super dealloc];
}




+ (MedSalesOrganizations*)find:(int64_t)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:[NSNumber numberWithLong:id_]];
    return (MedSalesOrganizations*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[MedSalesOrganizations class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longValue];
}

+ (MedSalesOrganizations*)load:(int64_t)id_
{
    return (MedSalesOrganizations*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLong:id_]];
}

+ (MedSalesOrganizations*)getInstance
{
    MedSalesOrganizations* me = [[MedSalesOrganizations alloc] init];
    [me autorelease];
    return me;
}
- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (MedSalesOrganizations*)getDownloadState
{
    return (MedSalesOrganizations*)[self i_getDownloadState];
}

- (MedSalesOrganizations*) getOriginalState
{
    return (MedSalesOrganizations*)[self i_getOriginalState];
}
- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 339:
        return self.surrogateKey;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_:(SUPLong)v
{
    switch(id_)
    {
    case 339:
        self.surrogateKey = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 332:
        return self.organization_name;
    case 333:
        return self.organization_region;
    case 334:
        return self.organization_street;
    case 335:
        return self.organization_city;
    case 336:
        return self.organization_state;
    case 338:
        return self.organization_phone;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 332:
        self.organization_name = v;
        break;;
    case 333:
        self.organization_region = v;
        break;;
    case 334:
        self.organization_street = v;
        break;;
    case 335:
        self.organization_city = v;
        break;;
    case 336:
        self.organization_state = v;
        break;;
    case 338:
        self.organization_phone = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 331:
        return self.organization_id;
    case 337:
        return self.organization_zip;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_:(SUPInt)v
{
    switch(id_)
    {
    case 331:
        self.organization_id = v;
        break;;
    case 337:
        self.organization_zip = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
- (SUPObjectList*)getLogRecords
{
   return [MedSalesLogRecordImpl findByEntity:@"Organizations":[self keyToString]];
}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	Organizations = \n\
	    organization_id = %i,\n\
	    organization_name = %@,\n\
	    organization_region = %@,\n\
	    organization_street = %@,\n\
	    organization_city = %@,\n\
	    organization_state = %@,\n\
	    organization_zip = %i,\n\
	    organization_phone = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.organization_id
    	,self.organization_name
    	,self.organization_region
    	,self.organization_street
    	,self.organization_city
    	,self.organization_state
    	,self.organization_zip
    	,self.organization_phone
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.surrogateKey
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}




+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:303] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"i\",x.\"_rc\",x.\"_ds\" FROM \"medsales_1_0_organizations\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"i\" from \"medsales_1_0_organizations_os\" x_os where x_os.\"i\" = x.\"i\"))))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[MedSalesOrganizations class]];
}



+ (MedSalesOrganizations*)findByPrimaryKey:(int32_t)organization_id
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:337] autorelease];
	[_selectSQL appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"i\",x.\"_rc\",x.\"_ds\" FROM \"medsales_1_0_organizations\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"i\" from \"medsales_1_0_organizations_os\" x_os where x_os.\"i\" = x.\"i\")))) and "
	                               "( x.\"a\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"%@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"int"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:[NSNumber numberWithInt:organization_id]];
	
	SUPObjectList* res = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withClass:[MedSalesOrganizations class]];
	if(res && ([res size] > 0))
	{   
		MedSalesOrganizations* cus = (MedSalesOrganizations*)[res item:0];
	    return cus;
	}
	else
	    return nil;
}



+ (SUPObjectList*)findByRegion:(NSString*)region
{
	return [self findByRegion:region skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findByRegion:(NSString*)region skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:331] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"i\",x.\"_rc\",x.\"_ds\" FROM \"medsales_1_0_organizations\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"i\" from \"medsales_1_0_organizations_os\" x_os where x_os.\"i\" = x.\"i\")))) and ( x.\"c"
	                               "\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:region];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[MedSalesOrganizations class]];
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}

@end